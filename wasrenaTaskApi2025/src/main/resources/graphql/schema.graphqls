scalar DateTime
scalar JSON

type CreateUserRegisterTokenResponse {
  token: String!
  lineName: String!
}

input NewUserAccountInput {
  authToken: String!
  userSettingId: String!
  userName: String!
}

input UpdateUserAccountInput {
  userSettingId: String!
  userName: String!
}

type UserAccountResponse {
  token: String!
  userSettingId: String!
  userName: String!
  imageUrl: String
  isLineBotFollow: Boolean!
}

input CategoryInput {
  name: String!
  displayOrder: Int
}

type TaskCategoryResponse {
  id: String!
  name: String!
  displayOrder: Int
}

enum DeadLineCheck {
  DailyOnce
  DailyHour
  WeeklyDay
  WeeklyDayInterval
  MonthOnce
  MonthDate
  YearOnceDate
}

input TaskDefinitionInput {
  title: String!
  displayFlag: Boolean!
  notificationFlag: Boolean!
  categoryId: String
  deadLineCheck: DeadLineCheck
  deadLineCheckSubSetting: JSON
  detail: String
}

type TaskDefinitionResponse {
  id: String!
  title: String!
  displayFlag: Boolean!
  notificationFlag: Boolean!
  categoryId: String
  categoryName: String
  deadLineCheck: DeadLineCheck
  deadLineCheckSubSetting: JSON
  detail: String
}

type TaskCheckDisplayResponse {
  id: String!
  title: String!
  displayFlag: Boolean!
  notificationFlag: Boolean!
  categoryId: String
  categoryName: String
  deadLineCheck: DeadLineCheck
  deadLineCheckSubSetting: JSON
  detail: String
  latestExecDateTime: DateTime
  nextDeadLineDateTime: DateTime
  isExceedDeadLine: Boolean!
}

input TaskExecuteInput {
  taskDefinitionId: String!
  memo: String
}

type TaskExecuteResponse {
  id: String!
  taskDefinitionId: String!
  executeDateTime: DateTime!
  memo: String
}

type Query {
  getUserRegisterToken(lineAuthCode: String!): CreateUserRegisterTokenResponse
  getRegisteredUser(lineAuthCode: String!): UserAccountResponse
  getUserAccountFromAuthHeader: UserAccountResponse
  getTaskCategories: [TaskCategoryResponse!]
  getTaskCategoryById(id: String!): TaskCategoryResponse
  getTaskDefinitions: [TaskDefinitionResponse!]
  getTaskDefinitionById(id: String!): TaskDefinitionResponse
  getTaskCheckDisplayList: [TaskCheckDisplayResponse!]
  getTaskExecuteListByDefinitionId(taskDefinitionId: String!): [TaskExecuteResponse!]
}

type Mutation {
  createUserAccount(input: NewUserAccountInput!): UserAccountResponse
  updateUserAccount(input: UpdateUserAccountInput!): UserAccountResponse
  createCategory(input: CategoryInput!): Boolean
  updateCategory(id: String!, input: CategoryInput!): Boolean
  deleteCategory(id: String!): Boolean
  createTaskDefinition(input: TaskDefinitionInput!): Boolean
  updateTaskDefinition(id: String!, input: TaskDefinitionInput!): Boolean
  deleteTaskDefinition(id: String!): Boolean
  createTaskExecute(input: TaskExecuteInput!): Boolean
  deleteTaskExecute(id: String!): Boolean
}
